C51 COMPILER V9.59.0.0   I2CSOFT                                                           02/26/2019 18:43:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2CSOFT
OBJECT MODULE PLACED IN .\Objects\i2csoft.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE i2csoft.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG 
                    -PRINT(.\Listings\i2csoft.lst) OBJECT(.\Objects\i2csoft.obj)

line level    source

   1          /**
   2           * i2csoft.c - Basic soft i2c function
   3           * Copyright (c) 2018 Silgm. All right reserved.
   4          */
   5          
   6          #include "i2csoft.h"
   7          #include "delay.h"
   8          
   9          static void s_reset_timeoutcnt(I2CDev *dev)
  10          {
  11   1              dev->timeoutcnt = 0;
  12   1      }
  13          static bool s_wait_for_timeout(I2CDev *dev)
  14          {
  15   1              ++(dev->timeoutcnt);
  16   1              if (dev->timeoutcnt == 65535)
  17   1                      return true;
  18   1              else 
  19   1                      return false;
  20   1      }
  21          
  22          void I2CDev_create(I2CDev *dev, Pin sdaPin, Pin sclPin)
  23          {
  24   1              dev->sda = sdaPin;
  25   1              dev->scl = sclPin;
  26   1              dev->started = false;
  27   1      }
  28          
  29          void I2CDev_init(I2CDev *dev)
  30          {
  31   1              digitalWrite(dev->sda, HIGH);
  32   1              digitalWrite(dev->scl, HIGH);
  33   1      }
  34          
  35          bool I2CDev_start(I2CDev *dev)
  36          {
  37   1              
  38   1              if (dev->started) // if started, do a restart condition
  39   1              {
  40   2                      digitalWrite(dev->sda, HIGH);
  41   2                      digitalWrite(dev->scl, HIGH);
  42   2                      
  43   2                      s_reset_timeoutcnt(dev);
  44   2                      while(digitalRead(dev->scl) == LOW)
  45   2                      {
  46   3                              // Clock stretching
  47   3                              // You should add timeout to this loop
  48   3                              if (s_wait_for_timeout(dev))
  49   3                                      break;
  50   3                      }
  51   2                      
  52   2                      if (digitalRead(dev->sda) == LOW)
  53   2                      {
  54   3                              return false;
C51 COMPILER V9.59.0.0   I2CSOFT                                                           02/26/2019 18:43:20 PAGE 2   

  55   3                      }
  56   2              }
  57   1              
  58   1              // SCL is high, set SDA from 1 to 0.
  59   1              digitalWrite(dev->sda, LOW);
  60   1              digitalWrite(dev->scl, LOW);
  61   1              dev->started = true;
  62   1              
  63   1              return true;
  64   1      }
  65          
  66          bool I2CDev_stop(I2CDev *dev)
  67          {
  68   1              // set SDA to 0
  69   1              digitalWrite(dev->sda, LOW);
  70   1              digitalWrite(dev->scl, HIGH);
  71   1              
  72   1              // Clock stretching
  73   1              s_reset_timeoutcnt(dev);
  74   1              while(digitalRead(dev->scl) == LOW)
  75   1              {
  76   2                      // Clock stretching
  77   2                      // You should add timeout to this loop
  78   2                      if (s_wait_for_timeout(dev))
  79   2                              break;
  80   2              }
  81   1              
  82   1              // Stop bit setup time, minimum 4us
  83   1              // SCL is high, set SDA from 0 to 1
  84   1              digitalWrite(dev->sda, HIGH);
  85   1      
  86   1              if (digitalRead(dev->sda) == LOW) {
  87   2                      return false;
  88   2              }
  89   1              
  90   1              dev->started = false;
  91   1              return true;
  92   1      }
  93          
  94          bool I2CDev_writeByte(I2CDev *dev, uint8_t bt)
  95          {
  96   1              uint8_t ack;
  97   1              shiftOut(dev->sda, dev->scl, MSBFIRST, bt);
  98   1              
  99   1              digitalWrite(dev->sda, HIGH);
 100   1              digitalWrite(dev->scl, HIGH);
 101   1              ack = digitalRead(dev->sda);
 102   1              digitalWrite(dev->scl, LOW);
 103   1              
 104   1              if (ack == LOW)
 105   1                      return true;
 106   1              else 
 107   1                      return false;
 108   1      }
 109          
 110          bool I2CDev_writeData(I2CDev *dev, uint8_t dat)
 111          {
 112   1              return I2CDev_writeByte(dev, dat);
 113   1      }
 114          
 115          bool I2CDev_writeAddress(I2CDev *dev, uint8_t addr, uint8_t mode_rw)
 116          {
C51 COMPILER V9.59.0.0   I2CSOFT                                                           02/26/2019 18:43:20 PAGE 3   

 117   1              return I2CDev_writeByte(dev, (addr<<1) | mode_rw);
 118   1      }
 119          
 120          uint8_t I2CDev_readByte(I2CDev *dev, bool ack)
 121          {
 122   1              uint8_t dat = shiftIn(dev->sda, dev->scl, MSBFIRST);
 123   1              
 124   1              //Send Ack
 125   1              if (ack == true)
 126   1              {
 127   2                      digitalWrite(dev->sda, ack);
 128   2                      digitalWrite(dev->scl, HIGH);
 129   2                      digitalWrite(dev->scl, LOW);    
 130   2              }
 131   1              
 132   1              return dat;
 133   1      }
 134          
 135          uint8_t I2CDev_readData(I2CDev *dev, bool ack)
 136          {
 137   1              return I2CDev_readByte(dev, ack);
 138   1      }
 139          
 140          
 141          
 142          
 143          
 144          
 145          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    763    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
